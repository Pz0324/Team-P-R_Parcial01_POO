<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYa
        HSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgo
        KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCADwASwDASIAAhEBAxEB/8QA
        HAABAQADAQEBAQAAAAAAAAAAAAMBAgUGBAcI/8QARhAAAQMDAgMEBAsEBwkAAAAAAAECEgMEEQUGIVKR
        EzFBYRZRcaEHFCIjMjNygbHB0RVCc5IkQ1ZigpPSJTQ2U2N0g4Si/8QAGwEBAQADAQEBAAAAAAAAAAAA
        AAECAwQFBgf/xAA4EQACAgECAgYHBwMFAAAAAAAAEQESAgMEBSETMUFRobEUMnGBkcHwBjNh0dLh4hZS
        8SIkkqKy/9oADAMBAAIRAxEAPwD4JO5l6iTuZeptgYPrj8lNZO5ndRJ3M7qbYGAEaydzL1EnczuptgYA
        NZO5ndTMncy9TOBgBGsnczuok7md1NsDACMSdzL1MSdzO6m2BgBGJO5l6iTuZepnAwAYk7mXqJO5l6mc
        DACNZO5l6mZO5l6mcDBAjEncy9RJ3MvUzgRARiTuZeok7mXqZwZwAjWTuZeok7mXqbYGAEaydzL1Ency
        9TbAx5AI1k7mXqJO5l6m2BgBGsncy9RJ3MvU2wMAI1k7mXqJO5l6m2BjyBUaydzL1Ency9TbAx5AGsnc
        y9RJ3MvU2x5DACNZO5l6iTuZeptjyGPIA3wMFMDBGZ1J4GCmBgMVJ4GCkREMVJ4GCkREMIngYKREQwie
        BgpEzgjCJYGCkTMQwiWBErgYKxUlERKxESMIlERKxEQwiURErgYDCJRM4KYGAwieBgpgYDCJ4GCkRgMI
        ngYKYGAwieBEpgYDKicfIR8imBgMInjyESkTMQwiWPIY8isREMI3wYiWiImLNlSURgrERDFSURgrERDF
        SURErERDFSURErERDFSURErERDFSUTMSkTMQxUlExEtERDLUlERKxEQxUlERKxEQxUlERKxEQxUlERKx
        EQxUlERKxEQxUlERKxEQxUlERKxESMVJRESsREMVJRESsTMQxUjERLREQxUjERLREQxU3iIloiJizdUj
        ERLREQxUjEzErERDFSURErEzEMVIxES0REMVIxES0REMVIxES0REjFSMREtERDFSMREtERDFSMREtERD
        FSMREtERDFSURErERDFSURErEzEMVIxES0REMVIxES0REMVIxES0REMVIxES0REMVIxES0REMtSMREtE
        RDFSkREvERMGbakIiJeIgGWpCIiXiIhipGIiWiIhipGIiWiIhipGIiWiIhipGIiWiIhipGIiWiIhipGI
        iXiIhipCIiXiIhipCIiXiIhipGIiWiIhipGIiWiIhipGIiWiIhipGIiWiIhipGIiWiZiGWpCIiXiIhip
        CIiXiIhipCIiXiIhipSIiXiImtm6pCIiXiIhipCIiXgIhipCIiXiIhipGIiWiIhipGIiWiIhipGIiXiI
        hipCIiXiIBipCIiXiIhlqQiIl4iIYqQiIl4iIYqQiZiWiIhipGIiWiIhipGIiWiIhipGIiXiIhipCIiX
        iIhipCIiXiIBipCIiXiIhipCJmJaIiGKlImYloiJgzfUjERLxEQxUhERLxEAxUhERLxEQxUhERLxEQxU
        hERLxEQxUhERLxESMVIRMxLRESsVIxES0REjFSMREvERDFSERAvARDLUhERLxEQxUhERLxEQxUhERLxE
        QxUhERLxEQxUjERLRMxDFSEREvERDFSEREvERDFSEREvERDFSkREvERNbN9SETMS0REMVIxES0TMQxUh
        ERLxEQxUhERLxEQxUhERLxEQxUhERLwEAxUhERLxEQxUhERLxEQxUjERLRMxDFSEREvERDFSEREvERDL
        UhERLxEQxUhERLxEQxUhERLxEQxUhERLxEQxUhEzEtAQDFSMREvERDFSEREvERDFSkREvERMGbqkIiJe
        IiGKkIiJeIiGWpGIiWiIhipGIiWiZiGKkIiJeIiGKkIiJeIiGKkIiJeIiGKkIiJeIiRipCIiXgIhipCJ
        mJaIiGKkYiJaIiGKkYiJaJmIYqQiIl4iIYqQiIl4iIZakIiJeIiGKkYmIl4iIYqQiZiWgIhipGIgWiIB
        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
</value>
  </data>
</root>